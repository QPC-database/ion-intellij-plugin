# Github Actions Workflow created for testing and preparing the Ion Intellij Plugin:
# - validate the Gradle Wrapper.
# - run tests and verifyPlugin tasks.
# - TODO: run buildPlugin task and prepare artifact for future tests.
# - TODO: create a draft release.
#
# Workflow is triggered on push and pull_request events.
#
# Docs:
# - GitHub Actions: https://help.github.com/en/actions

name: Build
on: [push, pull_request]
jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch sources
        uses: actions/checkout@v2

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

  # Run verifyPlugin and test Gradle tasks.
  test:
    name: Test
    needs: gradleValidation
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2

      # Downloads JDK 11 AWS Corretto Build
      - name: Download JDK
        run: wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz --output-document jdk.tar.gz

      # Setups JDK by using previously downloaded JDK.
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          jdkFile: jdk.tar.gz

      # Cache Gradle dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}

      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      # Run tests.
      - name: Run tests
        run: ./gradlew check

      # Run intellij:verifyPlugin task.
      - name: Verify Plugin
        run: ./gradlew verifyPlugin

  # Build plugin with buildPlugin Gradle task and provide artifact.
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.properties.outputs.name }}
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      artifact: ${{ steps.properties.outputs.artifact }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2

      # Downloads JDK 11 AWS Corretto Build
      - name: Download JDK
        run: wget https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz --output-document jdk.tar.gz

      # Setups JDK by using previously downloaded JDK.
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          jdkFile: jdk.tar.gz

      # Cache Gradle dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}

      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName_:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          ARTIFACT="${NAME}-${VERSION}.zip"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=changelog::$CHANGELOG"
          echo "::set-output name=artifact::$ARTIFACT"

      # Build artifact using buildPlugin Gradle task
      - name: Build Plugin
        run: ./gradlew buildPlugin

      # Upload plugin artifact to make it available in the next jobs
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: plugin-artifact
          path: ./build/distributions/${{ needs.build.outputs.artifact }}
